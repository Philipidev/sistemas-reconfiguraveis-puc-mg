library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL; -- Use numeric_std for to_integer and unsigned

entity ram_256x8 is
    port (
        nrst       : in  std_logic;
        clk_in     : in  std_logic;
        addr       : in  std_logic_vector(7 downto 0);
        dio        : inout std_logic_vector(7 downto 0);
        mem_wr_en  : in  std_logic;
        mem_rd_en  : in  std_logic
    );
end ram_256x8;

architecture Behavioral of ram_256x8 is
    type memory_type is array (255 downto 0) of std_logic_vector(7 downto 0);
    signal memory : memory_type := (others => (others => '0'));
    signal data_out : std_logic_vector(7 downto 0);
begin
    -- Process for asynchronous reset and synchronous write
    process(nrst, clk_in)
    begin
        if nrst = '0' then
            memory <= (others => (others => '0'));
        elsif rising_edge(clk_in) then
            if mem_wr_en = '1' then
                memory(to_integer(unsigned(addr))) <= dio;
            end if;
        end if;
    end process;

    -- Process for asynchronous read
    process(addr, mem_rd_en)
    begin
        if mem_rd_en = '1' then
            data_out <= memory(to_integer(unsigned(addr)));
        else
            data_out <= (others => 'Z');
        end if;
    end process;

    -- Tri-state buffer for dio
    dio <= data_out when mem_rd_en = '1' else (others => 'Z');
    
end Behavioral;
